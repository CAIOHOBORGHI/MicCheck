@*@page "/"*@
@page "/login/band"
@page "/login/fan"
@using System.ComponentModel.DataAnnotations
@using MicCheck.Web.Helpers;
@using MicCheck.Web.Services.Interfaces
@using MicCheck.Shared.Responses;
@using Microsoft.AspNetCore.Components;
@inject IAuthenticationService authenticationService
@inject NavigationManager NavigationManager

<div class="col-md-6 offset-md-3 mt-5">
    <div class="card">
        <h4 class="card-header">@roleLabel Authentication</h4>
        <div class="card-body">
            <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Username</label>
                    <InputText @bind-Value="model.Username" class="form-control" />
                    <ValidationMessage For="@(() => model.Username)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="model.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => model.Password)" />
                </div>
                <button class="btn btn-primary">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Login
                </button>
                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="alert alert-danger mt-3 mb-0">@error</div>
                }
            </EditForm>
        </div>
    </div>
</div>

@code {
    private Model model = new Model();
    private bool loading;
    private string error;
    private string roleLabel = "Band";

    protected override void OnInitialized()
    {
        if (NavigationManager.Uri.Split('/')?.Last().ToUpper() == "FAN")
        {
            roleLabel = "Fan";
        }

        // redirect to home if already logged in
        if (authenticationService.Token != null)
        {
            NavigationManager.NavigateTo("/home");
        }
    }

    private async void HandleValidSubmit()
    {
        loading = true;
        try
        {
            BaseResponse response = await authenticationService.Login(model.Username, model.Password, roleLabel);
            if (response.Success)
            {
                //toastService.ShowSuccess(response.Message);
                //await Task.Delay(5000);
                var returnUrl = NavigationManager.QueryString("returnUrl") ?? "/home";
                NavigationManager.NavigateTo(returnUrl);

            }
            else
            {
                //toastService.ShowError(response.Message);
            }

        }
        catch (Exception ex)
        {
            error = ex.Message;
            StateHasChanged();
        }
        finally
        {
            loading = false;
        }
    }

    private class Model
    {
        [Required]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }
    }
}