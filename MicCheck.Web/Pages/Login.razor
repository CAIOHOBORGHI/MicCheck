@*@page "/"*@
@page "/login/band"
@page "/login/fan"
@using System.ComponentModel.DataAnnotations
@using MicCheck.Web.Helpers;
@using MicCheck.Web.Services.Interfaces
@using MicCheck.Shared.Responses;
@using Microsoft.AspNetCore.Components;
@using MicCheck.Shared.Requests;

@inject IAuthenticationService authenticationService
@inject NavigationManager NavigationManager

<div class="col-md-6 offset-md-3 mt-5">
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">
            @error
        </div>
    }

    @if (!string.IsNullOrEmpty(success))
    {
        <div class="alert alert-success">@success</div>
    }
    <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h4">
                        @model.Role Authentication
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudTextField Label="Email" Variant="Variant.Outlined" @bind-Value="model.Email" For="@(() => model.Email)" Class="mt-3" />
                <MudTextField InputType="InputType.Password" Label="Password" Variant="Variant.Outlined" @bind-Value="model.Password" For="@(() => model.Password)" Class="mt-3" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Login
                </MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>

@code
{
    private AuthenticationRequest model = new AuthenticationRequest();
    private bool loading;
    private string error, success;

    protected override void OnInitialized()
    {
        model.Role = "Band";
        if (NavigationManager.Uri.Split('/')?.Last().ToUpper() == "FAN")
        {
            model.Role = "Fan";
        }

        // redirect to home if already logged in
        if (authenticationService.Token != null)
        {
            NavigationManager.NavigateTo("/home");
        }
    }

    private async void HandleValidSubmit()
    {
        loading = true;
        StateHasChanged();
        try
        {
            BaseResponse response = await authenticationService.Login(model.Email, model.Password, model.Role);

            if (response.Success)
            {
                success = response.Message;
                StateHasChanged();
                await Task.Delay(3000);
                var returnUrl = NavigationManager.QueryString("returnUrl") ?? "/home";
                NavigationManager.NavigateTo(returnUrl);
            }
            else
            {
                error = response.Message;
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private class Model
    {
        [Required]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }
    }
}